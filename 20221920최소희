#include <stdio.h>
#include <math.h>
#include <windows.h>
#include <conio.h>
#include <string.h>

#define WIDTH 48
#define HEIGHT 28
#define PI 3.141592653589793

#define FRAME_DURATION 0.1 // 프레임당 시간(초)

// 거리 상수 정의
#define EARTH_DISTANCE 12 // 태양-지구 거리
#define MOON_DISTANCE 4   // 지구-달 거리

// 공전 및 자전 각속도 (라디안/초)
#define SUN_ROTATION_SPEED (-2 * PI / 3)   // 태양 자전 속도
#define EARTH_REVOLUTION_SPEED (2 * PI / 3) // 지구 공전 속도
#define EARTH_ROTATION_SPEED (2 * PI / 3)   // 지구 자전 속도
#define MOON_REVOLUTION_SPEED (-2 * PI / 3)  // 달 공전 속도 (반시계 방향)
#define MOON_ROTATION_SPEED (2 * PI / 1)    // 달 자전 속도

// 화면 버퍼
char screen[HEIGHT][WIDTH * 2];

// 화면 버퍼 초기화
void clearScreenBuffer() {
    for (int y = 0; y < HEIGHT; y++) {
        for (int x = 0; x < WIDTH * 2; x++) {
            screen[y][x] = ' ';
        }
    }
}

// 화면에 텍스트 그리기
void drawPixel(int x, int y, const char* pixel) {
    if (x >= 0 && x < WIDTH && y >= 0 && y < HEIGHT) {
        screen[y][x * 2] = pixel[0];
        screen[y][x * 2 + 1] = pixel[1];
    }
}

// 화면 출력
void renderScreen() {
    system("cls");
    for (int y = 0; y < HEIGHT; y++) {
        for (int x = 0; x < WIDTH * 2; x++) {
            putchar(screen[y][x]);
        }
        putchar('\n');
    }
}

// 태양 그리기 (삼각형 모양 + 자전)
void drawSun(float rotationAngle) {
    int centerX = 20, centerY = 12;

    // 삼각형 좌표 계산
    int x1 = centerX + 3 * cos(rotationAngle);
    int y1 = centerY + 3 * sin(rotationAngle);
    int x2 = centerX + 3 * cos(rotationAngle + 2 * PI / 3);
    int y2 = centerY + 3 * sin(rotationAngle + 2 * PI / 3);
    int x3 = centerX + 3 * cos(rotationAngle + 4 * PI / 3);
    int y3 = centerY + 3 * sin(rotationAngle + 4 * PI / 3);

    drawPixel(x1, y1, "SS");
    drawPixel(x2, y2, "SS");
    drawPixel(x3, y3, "SS");
}

// 지구 그리기 (정사각형 모양 + 공전 + 자전)
void drawEarth(float revolutionAngle, float rotationAngle) {
    int sunX = 20, sunY = 12;

    float earthX = sunX + EARTH_DISTANCE * cos(revolutionAngle);
    float earthY = sunY + EARTH_DISTANCE * sin(revolutionAngle);

    // 정사각형 자전 좌표 계산
    float size = 3; // 지구의 크기
    for (float angle = 0; angle < 2 * PI; angle += PI / 2) {
        float x = earthX + size * cos(rotationAngle - angle);
        float y = earthY + size * sin(rotationAngle - angle);
        drawPixel((int)x, (int)y, "EE");
    }
}

// 달 그리기 (작은 동그라미 모양 + 공전 + 자전)
void drawMoon(float revolutionAngle, float rotationAngle, float earthX, float earthY) {
    // 달은 지구를 중심으로 공전하므로 공전각을 이용하여 위치 계산
    // MOON_DISTANCE는 지구 크기보다 더 크게 설정해서 겹치지 않도록 수정
    float moonX = earthX + (MOON_DISTANCE + 3) * cos(revolutionAngle);  // 지구 크기 3을 추가
    float moonY = earthY + (MOON_DISTANCE + 3) * sin(revolutionAngle);  // 지구 크기 3을 추가

    // 동그라미 그리기 (반지름 1.5로 크기 수정)
    float radius = 1.5; // 달의 반지름
    int numSegments = 20;
    for (int i = 0; i < numSegments; i++) {
        float angle = i * 2 * PI / numSegments;
        float x = moonX + radius * cos(rotationAngle + angle);
        float y = moonY + radius * sin(rotationAngle + angle);

        // 화면 범위를 벗어나지 않도록 좌표 체크
        if (x >= 0 && x < WIDTH && y >= 0 && y < HEIGHT) {
            drawPixel((int)x, (int)y, "MM");
        }
    }
}

// 학번과 이름 표시
void drawIntro() {
    const char* message = "20221920 최소희";
    int messageLength = strlen(message);
    int startX = (WIDTH * 2 - messageLength) / 2; // 가운데 위치 계산
    int startY = HEIGHT / 2;

    for (int i = 0; i < messageLength; i++) {
        screen[startY][startX + i] = message[i];
    }
}

int main() {
    float sunRotation = 0;      // 태양 자전 각도
    float earthRevolution = 0;  // 지구 공전 각도
    float earthRotation = 0;    // 지구 자전 각도
    float moonRevolution = 0;   // 달 공전 각도
    float moonRotation = 0;     // 달 자전 각도

    int state = 0;

    while (1) {
        if (_kbhit()) {
            char key = _getch();
            if (key == 27) break; // ESC 키를 누르면 종료
            if (key == ' ') state++; // 스페이스바로 상태 변경
        }

        clearScreenBuffer();

        if (state == 0) {
            drawIntro(); // 학번과 이름 출력
        }
        else if (state == 1) {
            // 정렬된 상태
            drawSun(0); // 태양 삼각형
            drawEarth(0, 0); // 지구 정사각형
            drawMoon(0, 0, 32, 12); // 달 동그라미 (지구 중심에서 4 떨어짐)
        }
        else if (state >= 2) {
            // 공전 및 자전
            drawSun(sunRotation);
            drawEarth(earthRevolution, earthRotation);
            float earthX = 20 + EARTH_DISTANCE * cos(earthRevolution);
            float earthY = 12 + EARTH_DISTANCE * sin(earthRevolution);
            drawMoon(moonRevolution, moonRotation, earthX, earthY);

            // 각도 업데이트
            sunRotation += SUN_ROTATION_SPEED * FRAME_DURATION;
            earthRevolution += EARTH_REVOLUTION_SPEED * FRAME_DURATION;
            earthRotation += EARTH_ROTATION_SPEED * FRAME_DURATION;
            moonRevolution += MOON_REVOLUTION_SPEED * FRAME_DURATION;
            moonRotation += MOON_ROTATION_SPEED * FRAME_DURATION;
        }

        renderScreen();
        Sleep(100); // 100ms
    }

    return 0;
}
